@page "/Coordinators/TA/{TaID}/TACommentEdit"
@using EcsDataManager.Entities
@using EcsDataManager.EFContracts
@inject NavigationManager NavigationManager
@inject IUpdateComment<Coordinators> CommentManager
@inject ICRUDManager<Coordinators> TaManager

<div class="h4">Costumer Comment Edit</div>

@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h3">
        Error:
    </div>
    <div class="h4">
        @errorString
    </div>
}
else if (_coordinatorEntity is null)
{
    <div class="h4"><em>Loading . . .</em></div>
}
else
{


    <div class="simple-form">

        <div class="container-fluid">

            <div class="form-group float-md-right">
                <button type="button" class="btn btn-primary" @onclick="@(async () => await UpdateComment())">Save</button>

                <button type="button" class="btn btn-danger" @onclick="Cancel">Cancel</button>
            </div>

            <div class="row float-right">
                <div class="col-md-8">
                    <div class="text-wrap">

                        @*<input class="form-control" @bind-value="@_coordinatorEntity.Comment" id="Comment" placeholder="Comment" size="500" />*@

                        <textarea @bind-value="@_coordinatorEntity.Comment" @bind-value:event="oninput" style="width:auto;overflow-y:scroll" cols="100" rows="20" dir="rtl"></textarea>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string TaID { get; set; }
    Coordinators _coordinatorEntity = new Coordinators();
    Coordinators _coordinator = new Coordinators();
    string errorString;

    private string _comment;

    public string Comment
    {
        get { return _comment; }
        set { _comment = value; }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _coordinatorEntity = await TaManager.Get(Convert.ToInt32(TaID));
            errorString = null;

        }
        catch (Exception ex)
        {

            errorString = ex.Message;
        }
    }
    protected async Task UpdateComment()
    {
        try
        {
           await CommentManager.ChangeComment(_coordinator, _coordinatorEntity);
            NavigationManager.NavigateTo("/Coordinators/TA" + "/" + TaID, true);
            errorString = null;
        }
        catch (Exception ex)
        {

            errorString = ex.Message;
        }

    }
    async Task Cancel()
    {
        NavigationManager.NavigateTo("Coordinators/TA" + "/" + TaID);
    }
}
