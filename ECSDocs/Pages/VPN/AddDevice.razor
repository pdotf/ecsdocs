@page "/VpnCustomers/addDevice/{CustomerID:int}"
@using EcsDataManager.EFContracts
@using EcsDataManager.Entities
@inject ICRUDManager<DeviceList> deviceManager
@inject NavigationManager NavigationManager


@using System.ComponentModel.DataAnnotations
@using System.IO
@using System.Net.Http.Headers

<div class="simple-form">
    <div class="container-fluid">
        <EditForm Model="@_device" OnValidSubmit="() => CreateDevice(CustomerID)">
            <DataAnnotationsValidator />
            <div class="row">
                <div class="col-md-6">
                    <InputText class="form-control" type="text"
                               placeholder="Radio Name"
                               @bind-Value="_device.RadioName" />
                    <ValidationMessage For="@(()=>_device.RadioName)" />

                </div>

                <div class="col-md-6">
                    <InputText class="form-control" type="text"
                               placeholder="Radio Ip"
                               @bind-Value="_device.RadioIp" />
                    <ValidationMessage For="@(()=>_device.RadioIp)" />
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <InputText class="form-control" type="text"
                               placeholder="Radio Model"
                               @bind-Value="_device.RadioModel" />
                    <ValidationMessage For="@(()=>_device.RadioModel)" />
                </div>

                <div class="col-md-6">
                    <InputText class="form-control" type="text"
                               placeholder="Radio Metro Site"
                               @bind-Value="_device.RadioMetroSite" />
                    <ValidationMessage For="@(()=>_device.RadioMetroSite)" />
                </div>
            </div>

            <div class="row">
                <div class="dropdown  col-md-6">
                    @*<input @bind-value="@_device.BackupActivationIsAuto"/>*@
                    <select class="form-control" @bind="@_device.IsAuto">
                        <option value="-1"></option>
                        <option value="0">                    Manual                 </option>
                        <option value="1">                     Auto                 </option>
                    </select>
                </div>

                @*<div class="col-md-6">
                        <InputText class="form-control" type=""
                                   placeholder="Automatic or manual"
                                   @bind-Value="_device.IsAutomatic" />
                    </div>*@
            </div>

            <br />

            <!-- Button to save the forecast -->

            <div class="row">
                <div class="col-md-2">
                    <button type="submit" class="btn btn-primary">

                        Save

                    </button>
                </div>
                <div class="col-md-2"><button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Cancel()">Close</button></div>
            </div>

        </EditForm>
    </div>
</div>

@code {

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [CascadingParameter] ModalParameters Parameters { get; set; }
    List<DeviceList> _devices = new List<DeviceList>();
    DeviceList _device = new DeviceList();
    Customers _customers = new Customers();
    [Parameter] public int CustomerID { get; set; }

    protected async Task CreateDevice(int id)
    {
        //ShowPopup = false;
        _device.CustomerId = id;
        var state = await deviceManager.Add(_device);

        NavigationManager.NavigateTo(uri: state != 0 ? "/VpnCustomers" + "/" + id.ToString() : "/Error", true);

    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/VpnCustomers" + "/" + CustomerID.ToString());
    }

    bool ShowPopup = false;

    void ClosePopup()

    {

        // Close the Popup

        ShowPopup = false;

    }

}
