@*@page "/customer"*@
@page "/VpnCustomers/{customerID:int}"

@using EcsDataManager.Contracts
@using EcsDataManager.Entities
@using EcsDataManager.EFContracts

@inject ICRUDManager<VpnCustomers> CustomerManager
@inject ICustomerUrlManager<CustomerUrl> CUrlManager
@inject ICRUDManager<DeviceList> DeviceManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime



<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<link href="~/_content/Blazored.Modal/blazored-modal.css" rel="stylesheet" />



@if (string.IsNullOrWhiteSpace(errorString) == false)
{
    <div class="h4">
        @errorString
    </div>
}
else if (_customerEntity is null)
{
    <div class="h4"><em>Loading...</em></div>
    <p style="white-space: pre-line"> </p>
}
else
{

    <div class="container-fluid">
        <div>
            @*ShowAddDevice(_customerEntity.id) OpenAddDevice()*@


            <AuthorizeView>
                <Authorized>

                    @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
                    {
                        <button @onclick="async () => ShowEditCustomer(_customerEntity.id).ConfigureAwait(true)" class="btn btn-primary">Edit</button>
                        <button @onclick="async () => ShowAddDevice(_customerEntity.id)" class="btn btn-success">Add Device</button>
                        <button @onclick="async () => Deletecustomer(_customerEntity.id)" class="btn btn-danger">Delete Customer</button>
                        <button @onclick="async () => ShowUpdateCommentPage(_customerEntity.id)" class="btn btn-warning">Update Comment</button>

                        if (string.IsNullOrWhiteSpace(_customerUrlEntity?.link) == true)
                        {
                            <button @onclick="async () => AddLinkPopUp()" class="btn btn-light">Add Link</button>
                        }
                        else
                        {
                            <button @onclick="async () => OpenLink()" class="btn btn-light">Nagios</button>
                        }
                    }
                    else if (@context.User.IsInRole("Users"))
                    {
                        <button @onclick="async () => ShowUpdateCommentPage(_customerEntity.id)" class="btn btn-warning">Update Comment</button>
                    }
                </Authorized>
            </AuthorizeView>

            @if (ShowPopup)
            {
                <EditForm Model="@_customerUrlEntity" OnValidSubmit="AddLink">
                    <DataAnnotationsValidator />
                    <!-- This is the popup to create or edit a user -->
                    <div class="modal" tabindex="-1" style="display:block" role="dialog">
                        <div class="modal-dialog">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h3 class="modal-title"><dfn>Add Url link</dfn></h3>
                                    <!-- Button to close the popup -->
                                    <button type="button" class="close"
                                            @onclick="ClosePopup">
                                        <span aria-hidden="true">X</span>
                                    </button>
                                </div>
                                <!-- Edit form for the current user -->
                                <div class="modal-body">

                                    <!-- Only show Id if not a new user -->
                                    @if (_customerUrlEntity.id != 0)
                                    {
                                        <p>@_customerUrlEntity.id</p>
                                    }
                                    <!-- Only allow edit if a new user -->
                                    @if (_customerUrlEntity.customerId != 0)
                                    {
                                        <p>@_customerUrlEntity.customerId</p>
                                    }
                                    else
                                    {

                                        <InputText @bind-Value="_customerUrlEntity.link" />
                                        <ValidationMessage For="@(() => _customerUrlEntity.link)" />

                                    }

                                    <br /><br />

                                    <!-- Button to save the user -->
                                    <button type="submit" class="btn btn-primary">
                                        Save
                                    </button>

                                    <!-- Only show delete button if not a new record -->
                                    @if (_customerUrlEntity.id != 0)
                                    {
                                        <!-- Button to delete the forecast -->
                                        <button class="btn btn-danger">
                                            Delete
                                        </button>
                                        @*@onclick= "DeleteUser"*@
                                    }
                                    <br />
                                    <span style="color:red">@errorStr</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </EditForm>
            }


        </div>
        <br /><br />
        <div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.CustomerName):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.CustomerName</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        Tell:

                    </h6>
                </div>
                <Card class="col-md-10"> <h7 dir="rtl"><span style="color:green">@_customerFullDataModel.Tel</span></h7></Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.Mobile):
                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7 dir="rtl"><span style="color:green">@_customerFullDataModel.Mobile</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.OwnerTeam):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.OwnerTeam</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.ServiceType):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.ServiceType</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.ServiceTopology):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.ServiceTopology</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.AccountManager):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.AccountManager</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.IpHQ):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.IpHQ</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.AAAGroup):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.AAAGroup</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.IpTunnel):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.IpTunnel</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.WanIpRange):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.WanIpRange</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.LanIpRange):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.LanIpRange</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.AccessList):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.AccessList</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.VRF):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.VRF</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.VpnToolsName):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.VpnToolsName</span></h7>
                </Card>
            </div>
            <div class="row container-fluid">
                <div class="col-md-2">
                    <h6>
                        @nameof(_customerFullDataModel.APN):

                    </h6>
                </div>
                <Card class="col-md-10">
                    <h7><span style="color:green">@_customerFullDataModel.APN</span></h7>
                </Card>
            </div>
            <br />
            <div class="row container-fluid">
                <div class="col-md-2"><h6>Comment: </h6></div>
                <div class="col-md-10" dir="rtl">
                    <MemoEdit @bind-Text="@_customerFullDataModel.Comment" ReadOnly="true" Float="Float.Right" Size="Size.ExtraLarge" Rows="10" />
                </div>
            </div>
            <br />
            @if (_dev == null)
            {
                <p>No Devices Found for customer</p>
            }
            else
            {
                <br />
                <br />
                <h3>Main Radio :</h3>
                <Card Class="container-fluid">
                    <br />
                    <div class="row">
                        <div class="col-md-3">

                            <h6>
                                @nameof(_dev.RadioName)
                            </h6>
                            <h7><span style="color:green">@_dev.RadioName</span></h7>

                            <h6>
                                @nameof(_dev.RadioIp)
                            </h6>
                            <h7><span style="color:green">@_dev.RadioIp</span></h7>

                        </div>
                        <div class="col-md-3">

                            <h6>
                                @nameof(_dev.RadioModel)
                            </h6>
                            <h7><span style="color:green">@_dev.RadioModel</span></h7>



                            <h6>
                                @nameof(_dev.RadioMetroSite)
                            </h6>
                            <h7><span style="color:green">@_dev.RadioMetroSite</span></h7>


                        </div>
                    </div>
                    <br />
                </Card>
            }
            <br />

            <h3>Backup Radio :</h3>
            @if (_devices == null)
            {
                <p>
                    No Extra Devices Found for customer
                </p>
            }
            else

            {
                <br />



                @foreach (var item in _devices)
                {
                    <Card Class="container-fluid">
                        <br />
                        <div class="row">

                            <div class="col-md-3">
                                <h6>Radio Name:</h6>
                            </div>
                            <div class="col-md-7">
                                <h7><span style="color:green">@item.RadioName</span></h7>
                            </div>

                        </div>
                        <div class="row">
                            <div class="col-md-3">
                                <h6>Radio IP:</h6>
                            </div>
                            <div class="col-md-6">
                                <h7><span style="color:green">@item.RadioIp</span></h7>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-3">
                                <h6>
                                    Radio Metro Site:
                                </h6>
                            </div>
                            <div class="col-md-6">
                                <h7><span style="color:green">@item.RadioMetroSite</span></h7>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-3">
                                <h6>
                                    Radio Model:
                                </h6>
                            </div>
                            <div class="col-md-6">
                                <h7><span style="color:green">@item.RadioModel</span></h7>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-3">
                                <h6>
                                    Backup Activation:
                                </h6>
                            </div>
                            <div class="col-md-6">
                                <h7><span style="color:green">@item.IsAutomatic</span></h7>
                            </div>
                        </div>
                        <br />
                        <AuthorizeView>
                            <Authorized>
                                @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
                                {
                                    <div class="row">
                                        <div class="col-md-2 float-right">
                                            <Button Color="Color.Success" Clicked="async () => ShowEditDevice(item.Id)">Edit</Button>
                                            <Button Color="Color.Danger" Clicked="async () => DeleteDevice(item.Id)">Delete</Button>
                                        </div>
                                    </div>
                                }
                            </Authorized>
                        </AuthorizeView>
                        <br />
                    </Card>
                    <br />
                }

            }



        </div>



    </div>

}

@functions {
    [CascadingParameter] public IModalService Modal { get; set; }
    //[CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter] public int ID { get; set; }
    [Parameter] public int CustomerID { get; set; }
    VpnCustomers _customerModel = new VpnCustomers();
    VpnCustomers _customerEntity = new VpnCustomers();
    CustomerUrl _customerUrlEntity = new CustomerUrl();

    VpnCustomers _customerFullDataModel = new VpnCustomers();
    List<DeviceList> _devices = new List<DeviceList>();
    DeviceList _dev = new DeviceList();
    DeviceList _devlist = new DeviceList();

    //DeviceList device = new DeviceList();
    string errorString;
    string ADMINISTRATION_ROLE = "Administrators";
    #region Pagination

    int _curPage;

    string _sortColumnName = "ID";
    string _sortDir = "DESC";

    #endregion

    int? total;

    bool ShowPopup = false;

    void ClosePopup()

    {

        // Close the Popup

        ShowPopup = false;
        errorStr = null;
        errorString = null;

    }
    async Task OpenAddDevice()
    {
        _devlist = new DeviceList();
        ShowPopup = true;

    }

    protected async Task CreateDevice(int id)
    {
        ShowPopup = false;
        _devlist.CustomerId = id;
        var state = await DeviceManager.Add(_devlist, 0);

        //NavigationManager.NavigateTo(uri: state != 0 ? "/Error" : "/customer" + "/" + id.ToString(), true);

    }
    public async Task NavigateToUrlAsync(string url, bool openInNewTab)
    {
        if (openInNewTab)
        {
            await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        }
        else
        {
            this.NavigationManager.NavigateTo(url);
        }
    }
    protected async Task OpenLink()
    {
        NavigateToUrlAsync(_customerUrlEntity.link, true);

    }
    protected async Task AddLinkPopUp()
    {

        _customerUrlEntity = new CustomerUrl();
        ShowPopup = true;

    }
    string errorStr;
    protected async Task AddLink()
    {
        var check = await CUrlManager.GetMainUrlById(CustomerID,1);
        var check2 = _customerUrlEntity.link;
        if (check?.customerId == null)
        {
            _customerUrlEntity.customerId = CustomerID;

            var urlState = await CUrlManager.AddUrl(_customerUrlEntity, 1);
            errorStr = null;
            ShowPopup = false;
        }
        else
        {
            errorStr = "link is exists";
        }


    }
    protected override async Task OnInitializedAsync()
    {
        try
        {
            _customerEntity = await CustomerManager.Get(CustomerID);
            _customerUrlEntity = await CUrlManager.GetMainUrlById(CustomerID,1);
            _customerFullDataModel = await CustomerManager.Get(CustomerID);
            _devices = await DeviceManager?.GetAll(0);
            _dev = await DeviceManager?.Get(CustomerID, 1);

            total = _devices?.Count();
            errorString = null;

        }
        catch (Exception ex)
        {
            errorString = $"Cannot Initialize the the page, {ex.Message}";
            //NavigationManager.NavigateTo(@"\Error", true);
        }
    }

    protected async Task ShowEditCustomer(int id)
    {

        NavigationManager.NavigateTo("/VpnCustomers/EditCustomer" + "/" + CustomerID, true);
    }

    protected async Task ShowEditDevice(int id)
    {
        try
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(VPN.EditDevice.ID), id);
            //DeviceManager.GetDeviceById();
            Modal.Show<VPN.EditDevice>("Edit Device", parameters);
            errorString = null;

        }
        catch (System.Exception ex)
        {

            errorString = ex.Message;
        }

    }
    protected async Task ShowAddDevice(int id)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(VPN.AddDevice.CustomerID), id);

        Modal.Show<VPN.AddDevice>($"Add Device", parameters);
        //NavigationManager.NavigateTo($"/addDevice/{CustomerID}", false);
    }
    protected async Task UpdateCustomers(int id)
    {

        await CustomerManager.Change(_customerModel, _customerEntity);
        //await BlazoredModal.Close(ModalResult.Ok<VpnCustomers>(_customerEntity));
        //RefreshRecords(currentPage);
        NavigationManager.NavigateTo($"/VpnCustomers/{CustomerID}", true);
    }
    protected async Task Deletecustomer(int id)
    {

        _customerModel = await CustomerManager.Get(id);
        await CustomerManager.Delete(_customerModel);
        NavigationManager.NavigateTo("/VpnCustomers", true);
    }
    protected async Task ShowUpdateCommentPage(int id)
    {
        try
        {
            NavigationManager.NavigateTo("VpnCustomers" + "/" + id + "/" + "CostumerCommentEdit", true);
            errorString = null;

        }
        catch (Exception ex)
        {

            errorString = ex.Message;
        }
    }
    protected async Task DeleteDevice(int id)
    {
        _dev = await DeviceManager.Get(id);
        await DeviceManager.Delete(_dev);
        NavigationManager.NavigateTo($"/VpnCustomers/{CustomerID}", true);

    }

    async Task Cancel()
    {
        //await BlazoredModal.Cancel();
        NavigationManager.NavigateTo($"/VpnCustomers/{CustomerID}", true);
    }
    private bool _isSortedAscending;
    private string _activeSortColumn;


    private async Task SortTable(string columnName)
    {
        if (columnName != _activeSortColumn)
        {
            //_customerModel = await SortRecords(columnName, "ASC");
            //_isSortedAscending = true;
            //_activeSortColumn = columnName;
        }
        else
        {
            if (_isSortedAscending)
            {
                //_customerModel = await SortRecords(columnName, "DESC");
            }
            else
            {
                //_customerModel = await SortRecords(columnName, "ASC");
            }

            _isSortedAscending = !_isSortedAscending;
        }
        _sortColumnName = columnName;
        _sortDir = _isSortedAscending ? "ASC" : "DESC";
    }

    private string SetSortIcon(string columnName)
    {
        if (_activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (_isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    public async Task RefreshRecords(int currentPage)
    {
        _customerModel = await CustomerManager.Get(ID);
        _curPage = currentPage;
        this.StateHasChanged();
    }


}



