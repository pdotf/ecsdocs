@page "/vpncustomerlist"
@using EcsDataManager.Contracts
@using EcsDataManager.Entities
@inject ICustomersManager<Customers> customerManager
@inject IMatDialogService MatDialogService
@inject NavigationManager NavigationManager
@*<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">*@
<div class="row">
    <h3 class="container-fluid">
        VPN Customers
    </h3>
</div>
<br/>
<div>
    <div class="row">
        @*<button class="btn btn-success" @onclick="@(() => Modal.Show<addVpnCustomer>("Add customer"))">Add Customer</button>*@
        <div class="col-md-2 float-left"><button class="btn btn-success" @onclick="@(()=> GoToAddCustomer())">Add Customer</button></div>
        @*<div class="col-md-6 float-right">
            <div class="dropdown">
                <button data-toggle="dropdown" class="btn btn-success">Export</button>
                <div class="dropdown-menu">
                    Excel
                </div>
            </div>
        </div>*@
    </div>
</div>
<br />

@if (customerModel == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <div class="float-left">
        <input type="text" id="txtSearch" placeholder="Search Customer name..." class="form-control" @bind="SearchTerm" @bind:event="oninput" />

    </div>
    <br />
    <br />
    <div>
        <DataGrid TItem="Customers"
                  Data="@customerModel"
                  ReadData="@OnReadData"
                  TotalItems="@totalcustomers" Hoverable="true" SelectedRowStyling="@OnSelectedRowStyling" Editable="true" Sortable="true" Striped="true">
            @*<DataGridColumn TItem="Customers" Field="@nameof(Customers.RowNumber)" Caption="#" />*@
            <DataGridColumn TItem="Customers" Field="@nameof(Customers.CustomerName)" Caption="Customer Name" />
            <DataGridColumn TItem="Customers" Field="@nameof(Customers.OwnerTeam)" Caption="Owner Team" />
            <DataGridColumn TItem="Customers" Field="@nameof(Customers.ServiceType)" Caption="Service Type" />
            <DataGridColumn TItem="Customers" Field="@nameof(Customers.ServiceTopology)" Caption="Service Topology" />
            <DataGridColumn TItem="Customers" Field="@nameof(Customers.AccountManager)" Caption="Account Manager" />
            <DataGridColumn TItem="Customers" Field="@nameof(Customers.id)" Caption="Action">
                <DisplayTemplate>
                    <Button Color="Color.Success" Clicked="async() => ShowCustomerDetail(context.id).ConfigureAwait(true)">Detail</Button>
                </DisplayTemplate>
            </DataGridColumn>

        </DataGrid>
    </div>


}


@code {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }
    [CascadingParameter] ModalParameters Parameters { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    private string searchTerm;
    private string SearchTerm
    {
        get { return searchTerm; }
        set { searchTerm = value; FilterRecords(); }
    }
    void OnSelectedRowStyling(Customers employee, DataGridRowStyling styling)
    {
        styling.Background = Background.Transparent;
    }

    public List<Customers> customerModel;
    public Customers customerEntity = new Customers();
    public string url = "/customer";

    #region Pagination

    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "ID";
    string sortDir = "DESC";

    #endregion
    bool dialogIsOpen = false;
    string name = "Customer Detail";
    string animal = null;
    string dialogAnimal = null;

    void OpenDialog()
    {
        dialogAnimal = null;
        dialogIsOpen = true;
    }

    void OkClick()
    {
        animal = dialogAnimal;
        dialogIsOpen = false;
    }
    protected override async Task OnInitializedAsync()
    {
        //display total page buttons
        pagerSize = 3;
        pageSize = 5;
        curPage = 1;

        try
        {
            customerModel = await customerManager.ListAll((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
            totalRecords = await customerManager.Count(searchTerm);
            totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
            SetPagerSize("forward");
        }
        catch (Exception ex)
        {

            throw ex;
        }

    }
    protected void GoToAddCustomer()
    {
        NavigationManager.NavigateTo("/addVpnCustomer", true);
    }

    int totalcustomers;
    async Task OnReadData(DataGridReadDataEventArgs<Customers> e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        // var response = await Http.GetJsonAsync<Customers[]>($"some-api/Customerss?page={e.Page}&pageSize={e.PageSize}");

        customerModel = await customerManager.ListAllWithoutPaging(sortColumnName, sortDir, searchTerm);
        totalcustomers = customerModel.Count();

        // always call StateHasChanged!
        StateHasChanged();
    }


    string errorStr;
    protected async Task ShowCustomerDetail(int id)
    {

        customerEntity = await customerManager?.GetById(id);
        try
        {
            NavigationManager.NavigateTo($"{url}/{id}", true);
            errorStr = null;

        }
        catch (Exception ex)
        {

            errorStr = ex.Message;
        }
    }


    private bool isSortedAscending;
    private string activeSortColumn;

    private async Task<List<Customers>> SortRecords(string columnName, string dir)
    {
        return await customerManager.ListAll((curPage - 1) * pageSize, pageSize, columnName, dir, searchTerm);
    }

    private async Task SortTable(string columnName)
    {
        if (columnName != activeSortColumn)
        {
            customerModel = await SortRecords(columnName, "ASC");
            isSortedAscending = true;
            activeSortColumn = columnName;
        }
        else
        {
            if (isSortedAscending)
            {
                customerModel = await SortRecords(columnName, "DESC");
            }
            else
            {
                customerModel = await SortRecords(columnName, "ASC");
            }

            isSortedAscending = !isSortedAscending;
        }
        sortColumnName = columnName;
        sortDir = isSortedAscending ? "ASC" : "DESC";
    }

    private string SetSortIcon(string columnName)
    {
        if (activeSortColumn != columnName)
        {
            return string.Empty;
        }
        if (isSortedAscending)
        {
            return "fa-sort-up";
        }
        else
        {
            return "fa-sort-down";
        }
    }

    public async Task refreshRecords(int currentPage)
    {
        customerModel = await customerManager.ListAll((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir, searchTerm);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
        else
        {
            startPage = 1;
            endPage = totalPages;
        }
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }

    public void FilterRecords()
    {
        endPage = 0;
        this.OnInitializedAsync().Wait();
    }

}
